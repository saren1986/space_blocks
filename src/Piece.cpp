#include "Piece.h"

extern const int sizeBlock;

Piece::Piece()
{

}

int     allPiece[7][4][5][5] = //7 kind, 4 rotation, 5x5 array for pieces: 0 = no block, 1 - block, 2 - pivot
{

    { /// 1 square
        { 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0,
          0, 0, 2, 1, 0,
          0, 0, 1, 1, 0,
          0, 0, 0, 0, 0  },

        { 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0,
          0, 0, 2, 1, 0,
          0, 0, 1, 1, 0,
          0, 0, 0, 0, 0  },

        { 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0,
          0, 0, 2, 1, 0,
          0, 0, 1, 1, 0,
          0, 0, 0, 0, 0  },

        { 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0,
          0, 0, 2, 1, 0,
          0, 0, 1, 1, 0,
          0, 0, 0, 0, 0  },
    },

    { /// 2 line
        { 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0,
          0, 1, 2, 1, 1,
          0, 0, 0, 0, 0,
          0, 0, 0, 0, 0  },

        { 0, 0, 0, 0, 0,
          0, 0, 1, 0, 0,
          0, 0, 2, 0, 0,
          0, 0, 1, 0, 0,
          0, 0, 1, 0, 0  },

        { 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0,
          1, 1, 2, 1, 0,
          0, 0, 0, 0, 0,
          0, 0, 0, 0, 0  },

        { 0, 0, 1, 0, 0,
          0, 0, 1, 0, 0,
          0, 0, 2, 0, 0,
          0, 0, 1, 0, 0,
          0, 0, 0, 0, 0  },
    },

    { ///3 T
        { 0, 0, 0, 0, 0,
          0, 1, 1, 1, 0,
          0, 0, 2, 0, 0,
          0, 0, 0, 0, 0,
          0, 0, 0, 0, 0  },

        { 0, 0, 0, 0, 0,
          0, 1, 0, 0, 0,
          0, 1, 2, 0, 0,
          0, 1, 0, 0, 0,
          0, 0, 0, 0, 0  },

        { 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0,
          0, 0, 2, 0, 0,
          0, 1, 1, 1, 0,
          0, 0, 0, 0, 0  },

        { 0, 0, 0, 0, 0,
          0, 0, 0, 1, 0,
          0, 0, 2, 1, 0,
          0, 0, 0, 1, 0,
          0, 0, 0, 0, 0  },
    },

    { ///4 Z
        { 0, 0, 0, 0, 0,
          0, 1, 1, 0, 0,
          0, 0, 2, 1, 0,
          0, 0, 0, 0, 0,
          0, 0, 0, 0, 0  },

        { 0, 0, 0, 0, 0,
          0, 0, 0, 1, 0,
          0, 0, 2, 1, 0,
          0, 0, 1, 0, 0,
          0, 0, 0, 0, 0  },

        { 0, 0, 0, 0, 0,
          0, 1, 1, 0, 0,
          0, 0, 2, 1, 0,
          0, 0, 0, 0, 0,
          0, 0, 0, 0, 0  },

        { 0, 0, 0, 0, 0,
          0, 0, 0, 1, 0,
          0, 0, 2, 1, 0,
          0, 0, 1, 0, 0,
          0, 0, 0, 0, 0  },
    },

    {///5  Z2
        { 0, 0, 0, 0, 0,
          0, 0, 1, 1, 0,
          0, 1, 2, 0, 0,
          0, 0, 0, 0, 0,
          0, 0, 0, 0, 0  },

        { 0, 0, 0, 0, 0,
          0, 1, 0, 0, 0,
          0, 1, 2, 0, 0,
          0, 0, 1, 0, 0,
          0, 0, 0, 0, 0  },

        { 0, 0, 0, 0, 0,
          0, 0, 1, 1, 0,
          0, 1, 2, 0, 0,
          0, 0, 0, 0, 0,
          0, 0, 0, 0, 0  },

        { 0, 0, 0, 0, 0,
          0, 1, 0, 0, 0,
          0, 1, 2, 0, 0,
          0, 0, 1, 0, 0,
          0, 0, 0, 0, 0  },
    },

    {/// 6 L
        { 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0,
          0, 1, 2, 0, 0,
          0, 0, 1, 0, 0,
          0, 0, 1, 0, 0  },

          { 0, 0, 0, 0, 0,
          0, 0, 1, 0, 0,
          1, 1, 2, 0, 0,
          0, 0, 0, 0, 0,
          0, 0, 0, 0, 0  },

        { 0, 0, 1, 0, 0,
          0, 0, 1, 0, 0,
          0, 0, 2, 1, 0,
          0, 0, 0, 0, 0,
          0, 0, 0, 0, 0  },

          { 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0,
          0, 0, 2, 1, 1,
          0, 0, 1, 0, 0,
          0, 0, 0, 0, 0  },


    },

    {///7 L inverted
        { 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0,
          0, 0, 2, 1, 0,
          0, 0, 1, 0, 0,
          0, 0, 1, 0, 0  },

        { 0, 0, 0, 0, 0,
          0, 0, 0, 0, 0,
          1, 1, 2, 0, 0,
          0, 0, 1, 0, 0,
          0, 0, 0, 0, 0  },

        { 0, 0, 1, 0, 0,
          0, 0, 1, 0, 0,
          0, 1, 2, 0, 0,
          0, 0, 0, 0, 0,
          0, 0, 0, 0, 0  },

        { 0, 0, 0, 0, 0,
          0, 0, 1, 0, 0,
          0, 0, 2, 1, 1,
          0, 0, 0, 0, 0,
          0, 0, 0, 0, 0  },


    }

};



int     startPiecePosition[7][4][2] =
{

    { ///1 square
        { 0, 3 },
        { 0, 3 },
        { 0, 3 },
        { 0, 3 },
    },

    { ///2 line
        { 1, 3 },
        { -1, 3 },
        { 0, 3 },
        { -1, 2 },
    },

    { ///3 T
        { 0, 2 },
        { -1, 3 },
        { 0, 3 },
        { 0, 3 },
    },

    { ///4 Z
        { 0, 3 },
        { 0, 3 },
        { 0, 3 },
        { 0, 3 },
    },

    {///5 Z2
        { 0, 2 },
        { -1, 3 },
        { 0, 2 },
        { -1, 3 },
    },

    {///6 L
        { -1, 3 },
        { -1, 2 },
        { 0, 2 },
        { 1, 3 },
    },

    {///7 L inverted
        { 0, 3 },
        { -1, 3 },
        { -1, 2 },
        { 1, 2 },
    },

};



int     smallWindowPiecePosition[7][4][2] =
{

    { ///1 square
        { 0, 3 },
        { 0, 3 },
        { 0, 3 },
        { 0, 3 },
    },

    { ///2 line
        { 1, 3 },
        { -1, 3 },
        { 0, 3 },
        { -1, 2 },
    },

    { ///3 T
        { 0, 2 },
        { -1, 3 },
        { 0, 3 },
        { 0, 3 },
    },

    { ///4 Z
        { 0, 3 },
        { 0, 3 },
        { 0, 3 },
        { 0, 3 },
    },

    {///5 Z2
        { 0, 2 },
        { -1, 3 },
        { 0, 2 },
        { -1, 3 },
    },

    {///6 L
        { -1, 3 },
        { -1, 2 },
        { 0, 2 },
        { 1, 3 },
    },

    {///7 L inverted
        { 0, 3 },
        { -1, 3 },
        { -1, 2 },
        { 1, 2 },
    },

};



int Piece::getPieceType(int wPiece, int wRotation, int x, int y)
{
    return allPiece[wPiece][wRotation][y][x];
}

int Piece::getStartXBlockPosition(int wPiece, int wRotation)
{
    return startPiecePosition[wPiece][wRotation][1];
}

int Piece::getStartYBlockPosition(int wPiece, int wRotation)
{
    return startPiecePosition[wPiece][wRotation][0];
}


int Piece::getSmallWindowXBlockPosition(int wPiece, int wRotation)
{
    return smallWindowPiecePosition[wPiece][wRotation][1];
}

int Piece::getSmallWindowYBlockPosition(int wPiece, int wRotation)
{
    return smallWindowPiecePosition[wPiece][wRotation][0];
}

void Piece::drawPiece(int numberOfPiece, int numberOfRotation, int posX, int posY )
{
    for (int i=0; i<5; i++)
        for(int j=0; j<5; j++)
        {
            if( getPieceType(numberOfPiece, numberOfRotation, i, j) != 0)
            {
                io ->renderPiece(numberOfPiece, posX + sizeBlock * j, posY + sizeBlock * i );
            }
        }
}
